class Wrp
  include ActiveModel::Model

  # the path to the uexternal file describing this object
  attr_accessor :file

  # name of warp3d structura
  attr_accessor :name

  # coordinates file name
  attr_accessor :coords_file

  # incidents file name
  attr_accessor :incids_file

  # constraints file name
  attr_accessor :constraints_file

  # list file name
  attr_accessor :list_file

  # compute commands file name
  attr_accessor :compute_cmds_file

  # flat file generated by warp3d
  attr_accessor :flat_file

  # Parse the file
  def self.parse(file)
    file = Pathname.new file
    contents = File.read(file.to_s).scan(/^[^c].*/).map(&:strip).reject(&:blank?)

    inputs = contents.grep(/^\*input/)
    list         = inputs.grep(/^\*input from '(.+\.list)'$/){$1}.first
    coords       = inputs.grep(/^\*input from '(.+\.coordinates)'$/){$1}.first
    incids       = inputs.grep(/^\*input from '(.+\.incid)'$/){$1}.first
    constraints  = inputs.grep(/^\*input from '(.+\.constraints)'$/){$1}.first
    compute_cmds = inputs.grep(/^\*input '(.+\.inp)'$/){$1}.first

    name = contents.grep(/^structure (.+)$/){$1}.first
    flat = contents.grep(/^file "(.+_flat)"$/){$1}.first

    new(
      file: file,
      list_file: list,
      coords_file: coords,
      incids_file: incids,
      constraints_file: constraints,
      compute_cmds_file: compute_cmds,
      name: name,
      flat_file: flat
    )
  end

  # Get file name of this wrp file
  def file_name
    file.basename.to_s
  end

  # Check whether input files specified in *.wrp file exist
  def valid?
    root = file.dirname

    !list_file.nil? &&
      root.join(list_file).file? &&
      !coord_file.nil? &&
      root.join(coords_file).file? &&
      !incids_file.nil? &&
      root.join(incids_file).file? &&
      !compute_cmds_file.nil? &&
      root.join(compute_cmds_file).file?
  end

  # Check if constraints file exists
  def valid_constraints?
    root = file.dirname

    root.join(constraints_file).file?
  end
end
