#PBS -N CTSP
#PBS -l walltime={{{hours}}}:00:00
#PBS -l nodes={{{nodes}}}:ppn=20
#PBS -o ctsp-batch.log
#PBS -j oe
#PBS -S /bin/bash

# Settings
LOGFILE=ctsp.out

########################################################
# Don't edit below unless you know what you are doing
########################################################

echo "---Job started at:"
date
echo ""

# Clean up and copy back workspace
clean_up ()
{
  echo "Cleaning up temporary workspace..."
  cp -r ${PFSDIR}/* $PBS_O_WORKDIR/.
}

# Kill batch script and clean up
die ()
{
  echo "ERROR: $@" 1>&2
  clean_up
  exit 1
}

# Check the exit status code of program
check_status ()
{
  if [[ $1 -ne 0 ]]; then
    die "Failed on '$2'"
  fi
}

# Set up CTSP environment (use default CTSP module)
module use /nfs/gpfs/PZS0645/local-ruby/emc2/share/modulefiles
module load ctsp

# Set up trap function
# Note: must be defined after `module load`
trap "die 'Unexpected termination'" TERM

# Create workspace in tmp directory
echo "Creating workspace in temporary directory"
cp -r ${PBS_O_WORKDIR}/* ${PFSDIR}
cd ${PFSDIR}

# Find number of cores from the subdirectories present
DIRS=$(find ${PWD} -maxdepth 1 -name 'CTSPsubd*' | sort)
NUM_CORES=$(echo "${DIRS}" | sed '/^$/d' | wc -l)
if [[ ${NUM_CORES} -eq 0 ]]; then
  DIRS="${PWD}"
  NUM_CORES=1
fi

# CTSP execution
echo "Processing CTSP using ${NUM_CORES} cores"
echo "Logging output to: ${LOGFILE}"

# Go into each subdirectory and run the CTSP executable
time pbsdsh bash -l -c "
  export PATH=${PATH}
  ARRAY=(${DIRS})
  WORKDIR=\${ARRAY[\$PBS_VNODENUM]}
  if [ -d \"\$WORKDIR\" ]; then
    exec 1>\$WORKDIR/${LOGFILE} 2>&1
    cd \$WORKDIR
    ctsp.x
  fi
"
check_status $? pbsdsh

# Merge CTSP subdirectories if more than one core
if [[ ${NUM_CORES} -ne 1 ]]; then
  echo "Merging the CTSP subdirectories"
  time merge.x > ${LOGFILE}
  check_status $? merge.x
fi

# Cutoff temperatures greater than melting temp
CUTOFF=$(awk -F',' 'NR==3{print $3; exit}' input.in)
echo "Cutoff spurious temperatures (CUTOFF = ${CUTOFF} C)"
echo "" >> ${LOGFILE}
echo "Using cutoff temperature = ${CUTOFF}" >> ${LOGFILE}
time echo ${CUTOFF} | cutoff.x >> ${LOGFILE}
check_status $? cutoff.x

# Convert temperature file to binary
echo "Convert temperature file into binary format"
echo "" >> ${LOGFILE}
time echo "CTSP" | temp_convert.x >> ${LOGFILE}
check_status $? temp_convert.x

# Create paraview inputs
echo "Generating Paraview input file: ctsp.case"
echo "" >> ${LOGFILE}
time ctsp2case.x >> ${LOGFILE}
check_status $? ctsp2case.x

# Always clean up after yourself
clean_up

echo ""
echo "---Job finished at:"
date

exit 0
